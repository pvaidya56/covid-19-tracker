{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","printStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setContries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","res","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","console","log","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89421cb3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InfoBox.css'\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n    return (\r\n        <Card \r\n            onClick={props.onClick}\r\n            className={`infoBox ${active && 'infoBox-selected'} ${isRed && \"infoBox-red\"}`}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox_title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infoBox_cases ${!isRed && \"infoBox_cases-green\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport { Circle, Popup } from 'react-leaflet';\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      multiplier: 800\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      multiplier: 1200\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      multiplier: 2000\r\n    }\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1)\r\n};\r\n\r\nexport const printStat = (stat) => \r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType='cases') => (\r\n    data.map(country => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n        <Popup>\r\n            <div className='info-container'>\r\n            <div\r\n                className='info-flag'\r\n                style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n            />\r\n            <div className='info-name'>{country.country}</div>\r\n            <div className='info-confirmed'>\r\n                Cases:{numeral(country.cases).format(\"0,0\")}\r\n            </div>\r\n            <div className='info-recovered'>\r\n                Recovered:{numeral(country.recovered).format(\"0,0\")}{\" \"}\r\n            </div>\r\n            <div className='info-deaths'>\r\n                Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n            </div>\r\n            </div>\r\n        </Popup>\r\n\r\n        </Circle>\r\n    ))\r\n)","import React from 'react'\r\nimport { Map as LeafletMap, TileLayer} from \"react-leaflet\";\r\nimport './Map.css';\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n            {/* loop through countries and draw circles */}\r\n            {showDataOnMap(countries, casesType )}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from 'numeral';\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n           {countries.map(({ country, cases }) => (\r\n               <tr>\r\n                   <td>{country}</td>\r\n                   <td>\r\n                       <strong>{numeral(cases).format(',')}</strong>\r\n                    </td>\r\n               </tr>\r\n\r\n           ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\"\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\nconst buildChartData = (data, casesType = 'casesType') => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n}\r\nfunction LineGraph({ casesType = 'cases', ...props }) {\r\n    const [data, setData] = useState({});\r\n    \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    let chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                });\r\n        };\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div className=\"props.className\">\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                />\r\n            )}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph;","import React, { useState, useEffect } from 'react';\nimport {\n  MenuItem, \n  FormControl,\n  Select,\n  Card,\n  CardContent\n} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport { sortData, printStat } from './util'\nimport Map from './Map';\nimport Table from './Table';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\nimport './App.css';\n\nfunction App() {\n\n  const [countries, setContries] = useState([])\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([])\n\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(res => res.json())\n    .then(data => {\n      setCountryInfo(data)\n    })\n    \n  }, [])\n\n  useEffect(() => {\n    //async --> send a req, wait for it and do something with the info\n\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((res) => res.json())\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setContries(countries);\n      })\n    }\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode)\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : \n    `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n    .then((res) => res.json())\n    .then((data) => {\n      setCountry(countryCode);\n      //all of the data from the country res\n      setCountryInfo(data);\n      setMapCenter( [data.countryInfo.lat, data.countryInfo.long] )\n      setMapZoom(4)\n    }) \n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app_dropdown\">\n          <Select\n            variant=\"outlined\"\n            onChange={onCountryChange}\n            value={country}\n          >\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            {countries.map((country) => (\n              <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))} \n          </Select>\n        </FormControl>\n        </div>\n        <div className=\"app_stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => {\n              setCasesType('cases')\n            console.log(\"set cases type\")}}\n            title=\"Coronavirus Cases\" cases={printStat(countryInfo.todayCases)} total={printStat(countryInfo.cases)} />\n          <InfoBox \n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType('recovered')}\n            title=\"Recovered\" cases={printStat(countryInfo.todayRecovered)} total={printStat(countryInfo.recovered)}/>\n          <InfoBox \n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType('deaths')}\n            title=\"Death\" cases={printStat(countryInfo.todayDeaths)} total={printStat(countryInfo.deaths)}/>\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries} center={mapCenter} zoom={mapZoom} /> \n      </div>\n      <div className=\"app_right\">\n        <Card>\n          <CardContent>\n            <h3>Live cases by country</h3>\n            <Table countries={tableData}/>\n            <h3 className=\"app_graphTitle\">Worldwide New {casesType} </h3>\n            <LineGraph className=\"app_graph\" casesType={casesType} className=\"app__graph\" casesType={casesType}/>\n          </CardContent>\n        </Card>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}